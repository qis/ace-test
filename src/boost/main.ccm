module;
// clang-format off
#include <boost/algorithm/string.hpp>
#include <boost/container/pmr/string.hpp>
#include <boost/container/pmr/vector.hpp>
#include <boost/circular_buffer.hpp>
#include <boost/static_string.hpp>
#include <boost/json.hpp>
#include <boost/url.hpp>
// clang-format on
#include <common.hpp>
export module ace;

export namespace ace {

void test()
{
  // algorithm
  std::string s(" test ");
  boost::to_upper(s);  // s == " TEST "
  boost::trim(s);      // s == "TEST"
  if (s != "TEST") {
    throw error{ "Boost algorithm failed: {}", s };
  }

  // container
  boost::container::pmr::vector_of<boost::container::pmr::string>::type v;
  v.emplace_back(s);
  if (v[0] != "TEST") {
    throw error{ "Boost container failed: {}", v[0] };
  }

  // circular buffer
  boost::circular_buffer<int> cb{ 2 };
  cb.push_back(1);
  cb.push_back(2);
  cb.push_back(3);
  if (cb[0] != 2 || cb[1] != 3) {
    throw error{ "Boost circular buffer failed: {}, {}", cb[0], cb[1] };
  }

  // static string
  boost::static_string ss{ "test" };
  if (ss != "test" || ss.size() != 4) {
    throw error{ "Boost static string failed: {} ({})", ss.data(), ss.size() };
  }

  // json
  boost::json::value value{ s };
  if (value.as_string() != "TEST") {
    throw error{ "Boost json failed: {}", value.as_string() };
  }

  // url
  if (const auto uri = boost::urls::parse_uri("https://github.com/qis/ace"); !uri) {
    throw error{ "Could not parse uri." };
  } else if (uri->scheme() != "https") {
    throw error{ "Could not parse uri scheme: {}", uri->scheme() };
  } else if (uri->host() != "github.com") {
    throw error{ "Could not parse uri host: {}", uri->host() };
  } else if (uri->path() != "/qis/ace") {
    throw error{ "Could not parse uri path: {}", uri->path() };
  }
}

}  // namespace ace
